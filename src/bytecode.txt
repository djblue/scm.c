Assembly Code:

(halt)

halts the virtual machine. The value in the accumulator is the result of
the computation.

(refer var x)

finds the value of the variable var in the current environment, and places
this value into the accumulator and sets the next expression to x.

(constant obj x)

places obj into the the accumulator and sets the next expression to x.

(close vars body x)

creates a closure from body, vars and the current environment, places the
closure into the accumulator, and sets the next expression to x.

(test then else)

tests the accumulator and if the accumulator is nonnull  (that is, the
test returned true), sets the next expression to then. Otherwise test sets
the next expression to else.

(assign var x)

changes the current environment binding for the variable var to the value
in the accumulator and sets the next expression to x.

(conti x)

creates a continuation from the current stack, places this continuation
in the accumulator, and sets the next expression to x.

(nuate s var)

restores s to be the current stack, sets the accumulator to the value of
var in the current environment, and sets the next expression to (return)

(frame x ret)

creates a new frame from the current environment, the current rib, and ret
as the next expression, adds this frame to the current stack, sets the
current rib to the empty list, and sets the next expression to x.

(argument x)

adds the value in the accumulator to the current rib and sets the next
expression to x.

(apply)

applies the closure in the accumulator to the list of values in the
current rib. Precisely, this instruction extends the closure’s environment
with the closure’s56 variable list and the current rib, sets the current
environment to this new environ- ment, sets the current rib to the empty
list, and sets the next expression to the closure’s body.

(return)

removes the first frame from the stack and resets the current environ-
ment, the current rib, the next expression, and the current stack.
